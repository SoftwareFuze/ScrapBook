generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String            @unique @db.VarChar(35)
  email            String            @unique @db.VarChar(512)
  password         String            @db.VarChar(1024)
  details          String            @default("") @db.VarChar(512)
  avatar           String            @default("/default-avatar.svg") @db.VarChar(150)
  activity         String            @default("Online") @db.VarChar(25)
  likes            Int               @default(0)
  suggestions      Boolean           @default(false)
  verified         Boolean           @default(false)
  blockedUsers     BlockedUser[]
  comments         Comment[]
  commentReplies   CommentReply[]
  communities      Community[]
  communityMembers CommunityMember[]
  followers        Follower[]
  friends          Friend[]
  messages         Message[]
  posts            Post[]
  openDMs          DM[]
  interests        UserInterest[]

  @@map("user")
}

model Follower {
  id     String @id @default(cuid())
  userID String
  user   User   @relation(fields: [userID], references: [id])

  @@index([userID], map: "follower_userID_fkey")
  @@map("follower")
}

model BlockedUser {
  id     String @id @default(cuid())
  userID String
  user   User   @relation(fields: [userID], references: [id])

  @@index([userID], map: "blocked_user_userID_fkey")
  @@map("blocked_user")
}

model Friend {
  id     String @id @default(cuid())
  userID String
  user   User   @relation(fields: [userID], references: [id])

  @@index([userID], map: "friend_userID_fkey")
  @@map("friend")
}

model CommunityMember {
  id            String    @id @default(cuid())
  nickname      String?
  userID        String
  communityID   String
  community     Community @relation(fields: [communityID], references: [id])
  user          User      @relation(fields: [userID], references: [id])
  owner         Boolean
  likedPosts    Post[]
  likedComments Comment[]

  @@map("community_member")
}

model Community {
  id          String              @id @default(cuid())
  title       String              @unique @db.VarChar(35)
  details     String              @db.VarChar(512)
  memberID    String?
  membersUser User[]
  members     CommunityMember[]
  interests   CommunityInterest[]
  posts       Post[]

  @@map("community")
}

model Post {
  id           String            @id @default(cuid())
  body         String?           @db.VarChar(800)
  likes        Int
  membersLiked CommunityMember[]
  userID       String
  communityID  String
  community    Community         @relation(fields: [communityID], references: [id], onDelete: Cascade)
  user         User              @relation(fields: [userID], references: [id], onDelete: Cascade)
  comments     Comment[]
  images       Image[]
  videos       Video[]

  @@index([communityID], map: "post_communityID_fkey")
  @@index([userID], map: "post_userID_fkey")
  @@map("post")
}

model Image {
  id     String  @id @default(cuid())
  url    String? @db.VarChar(255)
  postID String
  post   Post   @relation(fields: [postID], references: [id], onDelete: Cascade)

  @@index([postID], map: "image_postID_fkey")
  @@map("image")
}

model Video {
  id      String  @id @default(cuid())
  url     String? @db.VarChar(255)
  caption String? @db.VarChar(150)
  alt     String? @db.VarChar(150)
  postID  String
  post    Post   @relation(fields: [postID], references: [id], onDelete: Cascade)

  @@index([postID], map: "video_postID_fkey")
  @@map("video")
}

model UserInterest {
  id    String @id @default(cuid())
  name  String @unique @db.VarChar(35)
  users User[]

  @@map("user_interest")
}

model CommunityInterest {
  id          String      @id @default(cuid())
  name        String      @unique @db.VarChar(35)
  communities Community[]

  @@map("community_interest")
}

model DM {
  id       String    @id @default(cuid())
  messages Message[]
  users    User[]

  @@map("dm")
}

model Message {
  id              String @id @default(cuid())
  userID          String
  content         String @db.VarChar(255)
  directMessageID String
  directMessage   DM     @relation(fields: [directMessageID], references: [id], onDelete: Cascade)
  user            User   @relation(fields: [userID], references: [id])

  @@index([directMessageID], map: "message_directMessageID_fkey")
  @@index([userID], map: "message_userID_fkey")
  @@map("message")
}

model CommentReply {
  id        String  @id @default(cuid())
  content   String  @db.VarChar(255)
  userID    String
  user      User    @relation(fields: [userID], references: [id])
  commentID String
  comment   Comment @relation(fields: [commentID], references: [id], onDelete: Cascade)
}

model Comment {
  id          String            @id @default(cuid())
  userID      String
  content     String            @db.VarChar(255)
  postID      String
  post        Post              @relation(fields: [postID], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userID], references: [id])
  likes       Int               @default(0)
  memberLikes CommunityMember[]
  replies     CommentReply[]

  @@index([postID], map: "comment_postID_fkey")
  @@index([userID], map: "comment_userID_fkey")
  @@map("comment")
}

model BannedRefreshTokens {
  id           String @id @default(cuid())
  refreshToken String @unique @db.VarChar(512)

  @@map("banned_refresh_token")
}
