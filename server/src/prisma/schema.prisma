generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String            @unique @db.VarChar(35)
  email            String            @unique @db.VarChar(60)
  password         String            @db.VarChar(150)
  avatar           String            @default("/media/default-avatar.svg") @db.VarChar(255)
  details          String            @db.VarChar(512)
  friends          Friend[]
  followers        Follower[]
  blockedUsers     BlockedUser[]
  communities      Community[]
  likes            Int
  interests        Interest[]
  activity         String            @db.VarChar(25)
  openDMs          DM[]
  posts            Post[]
  messages         Message[]
  comments         Comment[]
  communityMembers CommunityMember[]

  @@map(name: "user")
}

model Follower {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userID], references: [id])
  userID String
}

model BlockedUser {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userID], references: [id])
  userID String

  @@map("blocked_user")
}

model Friend {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userID], references: [id])
  userID String

  @@map("friend")
}

model CommunityMember {
  id          String    @id @default(cuid())
  nickname    String?
  community   Community @relation(fields: [communityID], references: [id])
  communityID String
  user        User      @relation(fields: [userID], references: [id])
  userID      String

  @@map("community_member")
}

model Community {
  id       String            @id @default(cuid())
  title    String            @unique @db.VarChar(35)
  details  String            @db.VarChar(512)
  members  CommunityMember[]
  posts    Post[]
  member   User?             @relation(fields: [memberID], references: [id])
  memberID String?

  @@map(name: "community")
}

model Post {
  id          String    @id @default(cuid())
  title       String    @db.VarChar(150)
  body        String?   @db.VarChar(800)
  likes       Int
  comments    Comment[]
  images      Image[]
  videos      Video[]
  user        User      @relation(fields: [userID], references: [id])
  userID      String
  community   Community @relation(fields: [communityID], references: [id])
  communityID String

  @@map(name: "post")
}

model Image {
  id      String  @id @default(cuid())
  url     String? @db.VarChar(255)
  caption String? @db.VarChar(150)
  alt     String? @db.VarChar(150)
  post    Post?    @relation(fields: [postID], references: [id])
  postID  String?

  @@map(name: "image")
}

model Video {
  id      String  @id @default(cuid())
  url     String? @db.VarChar(255)
  caption String? @db.VarChar(150)
  alt     String? @db.VarChar(150)
  post    Post?    @relation(fields: [postID], references: [id])
  postID  String?

  @@map(name: "video")
}

model Interest {
  id    String @id @default(cuid())
  name  String @db.VarChar(35)
  users User[] @relation(references: [id])

  @@map(name: "interest")
}

model DM {
  id       String    @id @default(cuid())
  users    User[]    @relation(references: [id])
  messages Message[]

  @@map(name: "dm")
}

model Message {
  id              String     @id @default(cuid())
  user            User       @relation(fields: [userID], references: [id])
  userID          String
  content         String     @db.VarChar(255)
  reactions       Reaction[]
  directMessage   DM         @relation(fields: [directMessageID], references: [id])
  directMessageID String

  @@map(name: "message")
}

model Comment {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userID], references: [id])
  userID    String
  content   String     @db.VarChar(255)
  reactions Reaction[]
  post      Post       @relation(fields: [postID], references: [id])
  postID    String

  @@map(name: "comment")
}

model Reaction {
  id        String   @id @default(cuid())
  name      String
  count     Int      @default(1)
  comment   Comment? @relation(fields: [commentID], references: [id])
  commentID String?
  message   Message? @relation(fields: [messageID], references: [id])
  messageID String?

  @@map(name: "reaction")
}
