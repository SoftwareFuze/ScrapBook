generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  name      String     @unique @db.VarChar(35)
  email     String     @unique @db.VarChar(60)
  password  String     @db.VarChar(150)
  avatar    String     @default("/media/default-avatar.svg") @db.VarChar(255)
  details   String     @db.VarChar(512)
  followers Int
  // TODO: communities
  likes     Int
  interests Interest[]
  activity  String     @db.VarChar(25)
  openDMs   DM[]
  posts     Post[]
  messages  Message[]
  comments  Comment[]
  // TODO: friends
  // TODO: blocked users

  @@map(name: "user")
}

model Community {
  id      String @id @default(cuid())
  title   String @unique @db.VarChar(35)
  details String @db.VarChar(512)
  // TODO: users
  posts   Post[]

  @@map(name: "community")
}

model Post {
  id          String    @id @default(cuid())
  title       String    @db.VarChar(150)
  body        String?   @db.VarChar(800)
  likes       Int
  comments    Comment[]
  // TODO: images
  // TODO: videos
  user        User      @relation(fields: [userID], references: [id])
  userID      String
  community   Community @relation(fields: [communityID], references: [id])
  communityID String

  @@map(name: "post")
}

model Interest {
  id    String @id @default(cuid())
  name  String @db.VarChar(35)
  users User[] @relation(references: [id])

  @@map(name: "interest")
}

model DM {
  id       String    @id @default(cuid())
  users    User[]    @relation(references: [id])
  messages Message[]

  @@map(name: "dm")
}

model Message {
  id              String     @id @default(cuid())
  user            User       @relation(fields: [userID], references: [id])
  userID          String
  content         String     @db.VarChar(255)
  reactions       Reaction[]
  directMessage   DM         @relation(fields: [directMessageID], references: [id])
  directMessageID String

  @@map(name: "message")
}

model Comment {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userID], references: [id])
  userID    String
  content   String     @db.VarChar(255)
  reactions Reaction[]
  post      Post       @relation(fields: [postID], references: [id])
  postID    String

  @@map(name: "comment")
}

model Reaction {
  id        String   @id @default(cuid())
  name      String
  count     Int      @default(1)
  comment   Comment? @relation(fields: [commentID], references: [id])
  commentID String?
  message   Message? @relation(fields: [messageID], references: [id])
  messageID String?

  @@map(name: "reaction")
}
